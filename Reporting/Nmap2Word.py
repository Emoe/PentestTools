try:
    import sys
    import argparse
    import docx # Writing to an Word Doc
    import re   # for grepping information from Banner
    import os
    import xml
    import collections
    import warnings # for handling warnings
    import xml.etree.ElementTree as etree
    from IPy import IP
except (ImportError):
    print "Install Dependancies "
    sys.exit(1)


class nmap2word(object):

    inputPath = ""
    inputFiles = []
    outputPath = ""
    styleHeading1 = "" # default Heading
    styleHeading2 = ""  # default Heading
    scope = []
    nmapInfos = {}
    Scope = []


    def __init__(self,iPath,oPath):
        self.inputPath = iPath
        self.outputPath = iPath


##### Getter and setter Methods
    def set_inputPath(self, iPath):
        self.inputPath = iPath

    def get_inputPath(self):
        return self.inputPath

    def set_outputPath(self, oPath):
        self.outputPath = oPath

    def get_outputPath(self):
        return self.outputPath

    def get_inputFiles(self):
        return self.inputFiles

    def add_inputFile(self,File):
        if os.path.isfile(File):
            self.inputFiles.append(File)

    def set_styleHeading1(self, style):
        self.styleHeading1 = style

    def get_styleHeading1(self):
        return self.styleHeading1

    def set_styleHeading2(self, style):
        self.styleHeading2 = style

    def get_styleHeading2(self):
        return self.styleHeading2

    def get_nmapInfos(self):
        return self.nmapInfos

########################################################

############### Save Nmap Scans into dictnary ##########
    def addIP_nmapInfos(self,IP):
        if IP not in self.nmapInfos:
            self.nmapInfos[IP] = {}

    def addPort2IP_nmapInfos(self,IP,Port):
        if Port[0] not in self.nmapInfos[IP]:
            self.nmapInfos[IP][Port] = {}

    def addProto2Port_nmapInfos(self,IP,Port,Protocol):
        if "Proto" not in self.nmapInfos[IP][Port]:
            self.nmapInfos[IP][Port]["Proto"] = Protocol

    def addName2Port_nmapInfos(self,IP,Port,Name):
        if "Name" not in self.nmapInfos[IP][Port]:
            self.nmapInfos[IP][Port]["Name"] = Name

    def addProduct2Port_nmapInfos(self,IP,Port,Product):
        if "Prod" not in self.nmapInfos[IP][Port]:
            self.nmapInfos[IP][Port]["Prod"] = Product

    def addVersion2Port_nmapInfos(self,IP,Port,Version):
        if "Version" not in self.nmapInfos[IP][Port]:
            self.nmapInfos[IP][Port]["Version"] = Version

    def addExInfos2Port_nmapInfos(self,IP,Port,ExInf):
        if "ExInf" not in self.nmapInfos[IP][Port]:
            self.nmapInfos[IP][Port]["ExInf"] = ExInf

    def addIP2Scope(self,ip):
        self.scope.append(ip)

    def getScope(self):
        return self.scope
##################################################################

################# Get all XML Files from Directory ###############
    def findFiles(self):
        for root,subdirs, files in os.walk(self.inputPath):
            for name in files:
                if name.split(".")[-1] == "xml":
                    self.inputFiles.append(os.path.join(root,name))

####################################################################

###################### Parse Scope  ################################

    def add_Scope(self, scopePath):
        try:
            inputFileScope = open(scopePath,"r+")
            inputStringScope = inputFileScope.read()[:-1]
        except IOError as e:
            print "I/O error({0}): {1}".format(e.errno, e.strerror)
            sys.exit()
        try:
            ips = inputStringScope.split(",")
        except ValueError as e:
            print "Value error({0}): {1}".format(e.errno, e.strerror)
            sys.exit()
        try:
            for ip in ips:
                if (IP(ip)):
                    self.addIP2Scope(ip)
        except ValueError as e:
            print "Value error({0}): {1}".format(e.errno, e.strerror)


####################################################################
################# Parse File without a Scpre ########

    def parse_file_without_Scope(self):
        for file in self.inputFiles:
            print "DEBUG: FILE " + file
            try:
                XML = open(file, "r+")
                input = XML.read()
            except IOError:
                print 'File "'+ File +'" couldnt be opened'
                break
            try:
                dom = etree.fromstring(input)
            except xml.etree.ElementTree.ParseError as e:
                print "XML Parsing error"
                break
            try:
                hosts = dom.findall("host")
            except KeyError:
                print "Error: No Host found in File."
                break

            for host in hosts:

                addr = host.find("address").attrib["addr"]
                print "Debug: Host " + addr
                self.addIP_nmapInfos(addr)

                try:
                    ports = host.findall("ports/port")
                except KeyError:
                    print "Error: No Ports found for Host."
                    break

                for port in ports:
                    try:
                        state = port.find('state').attrib['state']
                    except AttributeError:
                        continue

                    if  state == "open":
                        portid = port.attrib['portid']
                        print portid
                        self.addPort2IP_nmapInfos(addr,portid)
                        self.addProto2Port_nmapInfos(addr,portid,port.attrib['protocol'])
                        try:
                            name = port.find('service').attrib['name']
                            self.addName2Port_nmapInfos(addr,portid,name)
                        except (KeyError,AttributeError):
                            continue
                        try:
                            product = port.find('service').attrib['product']
                            self.addProduct2Port_nmapInfos(addr,portid,product)
                        except (KeyError,AttributeError):
                            continue
                        try:
                            version = port.find('service').attrib['version']
                            self.addVersion2Port_nmapInfos(addr,portid,version)
                        except (KeyError,AttributeError):
                            continue
                        try:
                            exInf = port.find('service').attrib['extraInfos']
                            self.addExInfos2Port_nmapInfos(addr,portid,exInf)
                        except (KeyError,AttributeError):
                            continue

#####################################################
################## Parse File with Scope ############
    def parse_file_with_Scope(self):
        for file in self.inputFiles:
            print "DEBUG: FILE " + file
            try:
                XML = open(file, "r+")
                input = XML.read()
            except IOError:
                print 'File "'+ File +'" couldnt be opened'
                break
            try:
                dom = etree.fromstring(input)
            except xml.etree.ElementTree.ParseError as e:
                print "XML Parsing error"
                break
            try:
                hosts = dom.findall("host")
            except KeyError:
                print "Error: No Host found in File."
                break

            for host in hosts:
                addr = host.find("address").attrib["addr"]
                if addr not in self.getScope():
                    continue
                print "Debug: Host " + addr
                self.addIP_nmapInfos(addr)

                try:
                    ports = host.findall("ports/port")
                except KeyError:
                    print "Error: No Ports found for Host."
                    break

                for port in ports:
                    try:
                        state = port.find('state').attrib['state']
                    except AttributeError:
                        break

                    if  state == "open":
                        portid = port.attrib['portid']
                        self.addPort2IP_nmapInfos(addr,portid)
                        self.addProto2Port_nmapInfos(addr,portid,port.attrib['protocol'])
                        try:
                            name = port.find('service').attrib['name']
                            self.addName2Port_nmapInfos(addr,portid,name)
                        except (KeyError,AttributeError):
                            continue
                        try:
                            product = port.find('service').attrib['product']
                            self.addProduct2Port_nmapInfos(addr,portid,product)
                        except (KeyError,AttributeError):
                            continue
                        try:
                            version = port.find('service').attrib['version']
                            self.addVersion2Port_nmapInfos(addr,portid,version)
                        except (KeyError,AttributeError):
                            continue
                        try:
                            exInf = port.find('service').attrib['extraInfos']
                            self.addExInfos2Port_nmapInfos(addr,portid,exInf)
                        except (KeyError,AttributeError):
                            continue
#####################################################
################ Word Export ########################
    def WordExport(self,wordPath):
        document = docx.Document(wordPath)
        p = document.add_paragraph('Nmap-Scans')
        input = self.get_nmapInfos()
        print input
        #sys.exit()

        for IP in input:
            print "DEBUG: IP " + IP
            table = document.add_table(rows=1,cols=6)
            header_cells = table.rows[0].cells
            header_cells[0].text = "Port"
            header_cells[1].text = "Protocol"
            header_cells[2].text = "Service"
            header_cells[3].text = "Product"
            header_cells[4].text = "Version"
            header_cells[5].text = "Extra Info"
            ports = []
            for port in input[IP]:
                ports.append(int(port))

            for port in sorted(ports):
                port = str(port)
                print "DEBUG: PORT " + port
                row_cells = table.add_row().cells
                try:
                    row_cells[0].text = port
                except KeyError:
                    print "DEBUG: WORD Zeile leer."
                try:
                    row_cells[1].text = input[IP][port]["Proto"]
                except KeyError:
                    print "DEBUG: WORD Zeile leer."
                try:
                    row_cells[2].text = input[IP][port]["Name"]
                except KeyError:
                    print "DEBUG: WORD Zeile leer."
                try:
                    row_cells[3].text = input[IP][port]["Prod"]
                except KeyError:
                    print "DEBUG: WORD Zeile leer."
                try:
                    row_cells[4].text = input[IP][port]["Version"]
                except KeyError:
                    print "DEBUG: WORD Zeile leer."
                try:
                    row_cells[5].text = input[IP][port]["ExInf"]
                except KeyError:
                    print "DEBUG: WORD Zeile leer."
            document.add_paragraph(str(IP))

        document.save(wordPath)

##### Test #####

argParser = argparse.ArgumentParser(description="Converts Nmap XML output into a docx table.")
argParser.add_argument("--nmap", type=str,help="--nmap = Path to Nmap Input eg. --nmap nmap.xml")
argParser.add_argument("--word", type=str,help="--word = Path to Word File eg. --word word.docx")
argParser.add_argument("--filter", type=str, help="--filter = File with comma seperated list of Ips")
args = argParser.parse_args()

if args.nmap:
    if args.word:
        parser = nmap2word(args.nmap,args.word)
        if args.filter:
            parser.add_Scope(args.filter)
            parser.findFiles()
            parser.parse_file_with_Scope()
            parser.WordExport(args.word)
        else:
            parser.findFiles()
            parser.parse_file_without_Scope()
            parser.WordExport(args.word)
    else:
        sys.exit()
else:
    sys.exit()
